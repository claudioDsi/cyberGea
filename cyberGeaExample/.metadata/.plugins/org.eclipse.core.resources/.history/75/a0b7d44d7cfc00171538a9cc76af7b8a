package org.cyberGea.eventGenerators;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;
import org.eclipse.paho.client.mqttv3.MqttCallback;
import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttConnectOptions;
import org.eclipse.paho.client.mqttv3.MqttException;
import org.eclipse.paho.client.mqttv3.MqttMessage;

public class Sensor implements Runnable, MqttCallback
{
	private volatile boolean flag = true;
	private Random random; 
	private String unitMeasurement;
	private double min;
	private double max;
	private double val; 	
	private MqttClient sub;
	private String topicName; 
	private DataPublisher clientReference;	
	private Map<String,Integer> map = new HashMap<String, Integer>();
	
	private String name;
	private boolean startCamera = false;
	private String[] product= new String[] {};
	
	
	
	public Sensor(DataPublisher clientReference, double min, double max, String unitMeasurement, String topicName,String name)
	{
		this.topicName = topicName;
		this.clientReference = clientReference;
		this.name=name;
		this.min = min;
		this.max = max;
		this.val = 0;
		this.unitMeasurement = unitMeasurement;
		this.random = new Random();
		
	}
	
	public Sensor(DataPublisher client, String topic,int min,int max, String name) {
		
		this.min=min;
		this.max=max;
		this.name=name;
		this.topicName=topic;
		this.clientReference=client;
		try {
			//setSub();
		} catch (MqttException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	
	public void startGrowth() {
		
		for(String app:product) {
			map.put(app.split("=")[0],0);
		}
		System.out.println("Starting Growth...");
	}
	public void runGrowth() {
		
		int temp=0;
		String[] array;
		for(String app:product) {
			array=app.split("=");
			temp=map.get(array[0]);
			temp+=Integer.parseInt(array[1]);			
			map.put(array[0],temp);
		}
		System.out.println(topicName);
		System.out.println(map.toString());
	}

	public void getInfo()
	{
		System.out.println(val + " " + unitMeasurement);
	}
	
	public void stopThread()
	{
		this.flag = false;
	}

	@Override
	public void run()
	{
		
		
		while(flag)
		{			
			
			if(!name.equals("cameraS1"))
			{
				this.val = min + (max - min) * random.nextDouble();
				
				clientReference.sendMessage(topicName, clientReference.createMessage(String.valueOf(val + "," + name)));	

			}else
			{
				if(!Arrays.asList(product).isEmpty()) 
				{
					if(startCamera == false)
					{
						this.startGrowth();
						startCamera=true;		
					}else {
						this.runGrowth();
					}
				
					
					clientReference.sendMessage(topicName, clientReference.createMessage(map.toString() + "," + name));	

				//break;
				}
			}
			
			try {
				Thread.sleep(5000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}
	}
	
	public void setSub() throws MqttException
	{
		sub = new MqttClient("tcp://localhost:1883","cameraSub");
		MqttConnectOptions opts = new MqttConnectOptions();	
		sub.setCallback(this);
		sub.connect(opts);		
		sub.subscribe("startcamera");
	}
	
	@Override
	public void connectionLost(Throwable arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void deliveryComplete(IMqttDeliveryToken arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void messageArrived(String arg0, MqttMessage arg1) throws Exception {
		System.out.println("Growth Message: " + arg1.toString());
		this.product=arg1.toString().split(",");	
		
	}

	
}
