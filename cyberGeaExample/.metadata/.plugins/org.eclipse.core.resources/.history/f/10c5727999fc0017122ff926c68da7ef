package org.cybergea.datanalyzer;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.lang.reflect.Type;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.cyberGea.devicemanager.DeviceHandler;
import org.cyberGea.rawDataCollector.DataAggregator;
import org.cybergea.dbmanager.DataExchange;
import org.cybergea.dbmanager.provider.Crop;
import org.cybergea.dbmanager.provider.CropData;
import org.cybergea.dbmanager.provider.Environment;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.google.gson.reflect.TypeToken;

public class PresentationUpdater extends HttpServlet
{
	private String message;
	DataExchange field;
	DataAggregator aggr;
	DeviceHandler dev;
	CropData db=new CropData("cybergea", "root", "", "localhost", "3306");
	
	String currentSeason;
	int cod;
	int plan;
	ArrayList<String> maturity;
	
	public void setMessage(String newmsg) {
		this.message=newmsg;
	}
	
	public void bindDeviceHandler(DeviceHandler dev)
	{
		this.dev = dev;
	}
	
	public void bindDataAggregator(DataAggregator agg)
	{
		this.aggr = agg;
	}
	public void bindDataExchange(DataExchange field) {
		this.field=field;
	}
	public void printData() throws SQLException  {
		//String [] array= {"Estate","Inverno"};
		this.message=field.getJsonData();
		
	}
	
	
	   /*
	    * Function triggered when a GET request happens 
	    */
	 
	   public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException 
	   {
		  System.out.println("Send Data");
		  
		  response.setContentType("application/json");
		  response.addHeader("Access-Control-Allow-Origin","*");
	      response.addHeader("Access-Control-Allow-Methods","GET,POST");
	      response.addHeader("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept");
	      System.out.println("request pay");
	      PrintWriter out = response.getWriter();
	      
	      out.println(this.message);
	    try {
			printData();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	   }
	   public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		   
		   	  response.setContentType("application/json");
			  response.addHeader("Access-Control-Allow-Origin","*");
		      response.addHeader("Access-Control-Allow-Methods","GET,POST");
		      response.addHeader("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept");
		      PrintWriter out=response.getWriter();	    
			     
		      BufferedReader br = request.getReader();
		      String s=br.readLine(); 
		      
		      Gson gson=new Gson();
		      JsonElement jelem = gson.fromJson(s, JsonElement.class);		      
		      JsonObject job=jelem.getAsJsonObject();	
		     
		      
		      switch (job.get("type").toString()){
		    	  case "\"seasonchosen\"":
		    		  
		    		  plan=seasonManager(request,response,gson,job);
		    		 
		    		  break;
		    		  
		    	  case "\"productchosen\"":
		    		  
				try {
					sendUpdatedPlan(request, response, gson, s, job,plan);
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		    		  
		    		  //out.println(c);
		    		  break;
		    		  
	    		  case "\"startenvironment\"":
	    			  
	    			 
	    			  JsonObject jack=new JsonObject();
	    			  jack.addProperty("ack", "success");
	    			  System.out.println(jack);
		    		  out.println(jack);
		    		  
					  try {
							this.calculateConditions();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
				
		    		  break;
		    		  
	    		  case "\"updateui\"":
	    			  Environment current;
	    			  String js;
	    			  JsonObject jk = new JsonObject();
	    			  ArrayList<Crop> prova;
	    			  
	    			  /*Environment*/
	    			  current = aggr.getCurrentEnvironment();
	    			  js = gson.toJson(current);
	    			  jk.add("environment", gson.fromJson(js, JsonElement.class));
	    			  
	    			  /*Crop */
	    			  //prova=db.getCropByGrowth(plan, currentSeason);
	    			   
	    			  
					  try {
						/*Sensor*/
						js = gson.toJson(db.getSensorData());
						jk.add("sensor", gson.fromJson(js, JsonElement.class));
						
		    			/*Piano*/
		    			jk.addProperty("plan", ""+plan);
		    			
		    			/*Stagione*/
		    			jk.addProperty("season", currentSeason);
		    			
		    			/*Mappa*/
		    			
		    			/*Prodotti e Maturazione*/
		    			prova=db.getCropByGrowth(plan, currentSeason);
		    			js=gson.toJson(prova);
		    			jk.add("crops", gson.fromJson(js, JsonElement.class));
		    			
		    			System.out.println(jk.toString());
		    			/*Invio*/
		    			out.println(jk);


					  } catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					  }
	    			  
	    			  break;  
	    			  
	    			  
	    		  	 case "\"alarm\"":
	    			  
		    			 
	    			  JsonObject jcrop=new JsonObject();
	    			  String jstr=gson.toJson(maturity);
	    			  jcrop.add("maturity", gson.fromJson(jstr, JsonElement.class));
		    		  out.println(jcrop);
		    		  
					 
		    		  break;
	    			  
	    			  
	    		 default:
	    			 System.out.println("channel not found");
		      }
		      		    
		     
	   }
	   
   public int seasonManager (HttpServletRequest request, HttpServletResponse response, Gson gson,JsonObject job) throws ServletException, IOException {
		   
	   	System.out.println("Res" + job);	     
	    PrintWriter out=response.getWriter();	    
	     
	      
		try { 		    	  
	    	
	    	  ArrayList<String> prova=new ArrayList<String>();
	    	  		    	  
	    	  Set<Map.Entry<String, JsonElement>> entries = job.entrySet();//will return members of your object
	    	  	for (Map.Entry<String, JsonElement> entry: entries) {
	    	      
	    	      prova.add(job.get(entry.getKey()).toString());   	      
	    	      
	    	  	}	       	
			    	 
	   
    	String json=field.getProductbySeason(prova);   	  
    	 cod=field.insertNewPlan(prova);  
    	 	 
    	JsonObject j1=gson.fromJson(json, JsonObject.class); 
    	
    	out.println(j1);
		    	 
		} 	
		
			      
	      catch (SQLException e) {				
			e.printStackTrace();
	      }
      return cod;
	   }
	   
	   
	   
   public void sendUpdatedPlan (HttpServletRequest request, HttpServletResponse response, Gson gson,String s,
			   JsonObject job,int id) throws ServletException, IOException, SQLException {
	   		
		 PrintWriter out=response.getWriter();			    
		 JsonArray full=new JsonArray();		 
		 Set<Map.Entry<String, JsonElement>> entries = job.entrySet();//will return members of your object
		
		  
		 //JsonObject j1=new JsonObject();
		 for (Map.Entry<String, JsonElement> entry: entries) {
			 String currentS=entry.getKey();			
			 
			 	if(!currentS.equals("type")) {		
		   	      
			 		 ArrayList<String> listdata = new ArrayList<String>();   
		   	      	JsonArray yourJson =job.getAsJsonArray(currentS.toString());
		   	      
			   	      
			   	     
			   	   
				   	   	if (yourJson != null) { 
					   	  for(JsonElement crop: yourJson)
					   	    listdata.add(crop.getAsString());					   	  
				   	   	} 
				   	   	
				   	
				   field.updateAnnualPlan(listdata, id);	
			   	   String json=field.retrieveBasicConditions(currentS,plan);			 		  
		 		   JsonElement j1=gson.fromJson(json, JsonElement.class); 				   	  
		 		  
		 		   full.add( j1 );
			 	}
		   	     
   	  			 
		   	      
		 		
   	      
		}	    	  
 		
 		
  		out.println(full);
 		  
 		  
			   
   }
   
   
   public void calculateConditions() throws SQLException
   {	   
	   
	   System.out.println(aggr.getCurrentEnvironment().toStringSensor());
	   ArrayList<String> names=new ArrayList<>();
	   Map<String,Integer> map=new HashMap<String,Integer>();
	   Environment idealEnv;
	   
	   ArrayList<Crop> list=db.getCropData(plan);	
	   
	   for(Crop c:list) {
		   //names.add(c.getName());
		   map.put(c.getName(), c.getMaturityTime());
	   }
	  
	   ArrayList<Float> avg=getAverage(list);
	   this.currentSeason = list.get(0).geSeason();
	   idealEnv = db.insertIdealConditions(avg, currentSeason,plan);
	   //aggr.setCamera(names);
	   aggr.setCamera(map);
	   	   
	   dev.moveActuator(idealEnv);  
	 
   }
   
   public ArrayList<Float> getAverage(ArrayList<Crop> listCrop) {
	   Float avgHum=0.0f;
	   Float avgAir=0.0f;
	   Float avgLight=0.0f;
	   Float avgTemp=0.0f;
	   ArrayList<Float> array=new ArrayList<>();
		   	for(int i=0;i<listCrop.size();i++) {
		   		avgHum+=listCrop.get(i).getHumidity();
		   		avgAir+=listCrop.get(i).getAir();
		   		avgLight+=listCrop.get(i).getLight();
		   		avgTemp+=listCrop.get(i).getTemperature();
		   	}
	   	
	   array.addAll(Arrays.asList(new Float[] {avgHum/listCrop.size(),avgAir/listCrop.size(),avgLight/listCrop.size(),avgTemp/listCrop.size()}));
	   	
	   return array;
   }
   
   public void checkConditions() {
	   System.out.println(aggr.getCurrentEnvironment().toStringSensor());
	   System.out.println("ciao"+aggr.getProductsGrowth());
	   String clean=aggr.getProductsGrowth().replace("{","").replace("}", "");
	   String[] f=clean.split(",");
	   for(String crop: f) {
		   String[] c=crop.split("=");
		   	if(c[1].equals("300")) {
		   		maturity.add(c[0]);
		   	}
	   }
	   
   }

   
	   public void destroy() {
	   
	      // do nothing.
	   }
}
